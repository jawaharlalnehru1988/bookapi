{
    "courses":[
        {
          "id": 1,
          "title": "HTML 5",
          "imageLink": "1esycjflfUTDR6cFtWQfhRnFvOpmCuYPH",
          "routerName": "/html",
          "details": "HTML (Hypertext Markup Language) is a markup language used for creating web pages and other types of documents that are viewed in a web browser. It defines the structure and content of a web page using elements and attributes."
        },
        {
          "id": 2,
          "title": "CSS 3",
          "imageLink": "16UTCy58VpxR-nIKlvqEHn3QqEzbd1pgC",
          "routerName": "/css",
          "details": "CSS (Cascading Style Sheets) is a styling language used to describe the presentation of a document written in HTML or XML, including colors, fonts, layout, and animations. It is essential for web development and design."
        },
        {
          "id": 3,
          "title": "Bootstrap",
          "imageLink": "1gdo5T9_2Ht1Qhc2XyesMzV-zHBzM7CSn",
          "routerName": "/bootstrap",
          "details": "Bootstrap is a popular open-source front-end framework for building responsive and mobile-first web applications with HTML, CSS, and JavaScript. It provides pre-designed UI components and a flexible grid system for creating modern and professional-looking websites quickly and easily."
        },
        {
          "id": 4,
          "title": "JavaScript",
          "imageLink": "1161X9DKzFMlszROTN69wV5oyUsO9Z_wm",
          "routerName": "/javascript",
          "topics":[ {"id":1,"topicName":"Intro"}, {"id":2,"topicName":"variables"}, {"id":3,"topicName":"data types"}, {"id":4,"topicName":"Strings"}, {"id":5,"topicName":"arrays"}, {"id":6,"topicName":"objects"}, {"id":7,"topicName":"functions"}, {"id":8,"topicName":"loops"}, {"id":9,"topicName":"conditional statements"}, {"id":10,"topicName":"operators"}, {"id":11,"topicName":"DOM manipulation"}, {"id":12,"topicName":"events"}, {"id":13,"topicName":"callbacks"}, {"id":14,"topicName":"promises"}, {"id":15,"topicName":"async/await"}, {"id":16,"topicName":"classes"}, {"id":17,"topicName":"inheritance"}, {"id":18,"topicName":"closures"}, {"id":19,"topicName":"scope"}, {"id":20,"topicName":"hoisting"}, {"id":21,"topicName":"error handling"}, {"id":22,"topicName":"regular expressions"}, {"id":23,"topicName":"JSON"}, {"id":24,"topicName":"AJAX"}, {"id":25,"topicName":"API"}, {"id":26,"topicName":"WebSockets"}, {"id":27,"topicName":"local storage"}, {"id":28,"topicName":"session storage"}, {"id":29,"topicName":"cookies"}, {"id":30,"topicName":"ES6 features"} ],
          "details": "JavaScript is a popular programming language used to create interactive and dynamic web pages and web applications. It is a client-side scripting language that runs on web browsers and can be used on both the front-end and back-end of web development."
        },
        {
          "id": 5,
          "title": "Data Structure and Algorithm",
          "imageLink": "1dEcG1sEOgSsx30ho5AZWFtLFqZdtBuSw",
          "routerName": "/dsa",
          "details": "Data Structures and Algorithms (DSA) is a field of computer science that deals with the design, analysis, and implementation of algorithms and data structures to solve complex computational problems efficiently. It is an essential topic for software engineers and computer scientists."
        },
        {
          "id": 6,
          "title": "Type Script",
          "imageLink": "1tlSW734PVtP36dN8nLHPa6EF26dJAfso",
          "routerName": "/typescript",
          "details": "TypeScript is a statically-typed superset of JavaScript that adds optional type annotations and other features to the language, allowing for more robust code and better tooling support."
        },
        {
          "id": 7,
          "title": "Angular",
          "imageLink": "1Ut5G9hHk0xPTqEStQRoSsC_2K3nfKzT5",
          "routerName": "/angular",
          "topics": [
            {
              "id": 1,
              "topic": "Components",
              "description": "A component is the basic building block of an Angular application, which consists of a template, class, and metadata. Components encapsulate different parts of the UI, making it easier to manage and reuse code.",
              "examples": [
                "ng generate component my-component",
                "<app-my-component></app-my-component>"
              ]
            },
            {
              "id": 2,
              "topic": "Directives",
              "description": "A directive is a way to attach behavior to an existing DOM element or a component. Directives are classified into three types: component, attribute, and structural directives.",
              "examples": [
                "ng generate directive my-directive",
                "<div myDirective></div>"
              ]
            },
            {
              "id": 3,
              "topic": "Services",
              "description": "A service is a singleton object that can be used across the entire application. Services provide a way to share data and functionality between different components, directives, and modules.",
              "examples": [
                "ng generate service my-service",
                "constructor(private myService: MyService) { }"
              ]
            },
            {
              "id": 4,
              "topic": "Modules",
              "description": "A module is a container for related code, including components, directives, pipes, and services. Modules help to organize an application and make it easier to manage dependencies.",
              "examples": [
                "ng generate module my-module",
                "imports: [CommonModule]"
              ]
            },
            {
              "id": 5,
              "topic": "Templates",
              "description": "A template is a view for a component, which contains HTML and Angular directives. Templates are used to render data and create the user interface of an application.",
              "examples": [
                "<div>{{ myData }}</div>",
                "<ng-template></ng-template>"
              ]
            },
            {
              "id": 6,
              "topic": "Pipes",
              "description": "A pipe is a way to transform data before it is displayed in a template. Pipes can be used for filtering, sorting, and formatting data.",
              "examples": [
                "{{ myData | uppercase }}",
                "ng generate pipe my-pipe"
              ]
            },
            {
              "id": 7,
              "topic": "Dependency Injection",
              "description": "Dependency Injection is a design pattern used in Angular for providing dependencies to components, services, and other objects. DI makes it easier to manage dependencies and write testable code.",
              "examples": [
                "constructor(private myService: MyService) { }",
                "providers: [MyService]"
              ]
            },
            {
              "id": 8,
              "topic": "Routing",
              "description": "Routing is the process of navigating from one view to another in an Angular application. The Angular Router provides a way to define routes and handle navigation between them.",
              "examples": [
                "const routes: Routes = [{ path: 'home', component: HomeComponent }];",
                "<a routerLink='/home'>Home</a>"
              ]
            },
            {
              "id": 9,
              "topic": "Forms",
              "description": "Forms are a crucial part of any web application. Angular provides two ways to build forms: template-driven and reactive forms. Forms in Angular are built using the FormsModule and ReactiveFormsModule modules.",
              "examples": [
                "<form (ngSubmit)='onSubmit()'><input [(ngModel)]='myData'></form>",
                "this.myForm = this.formBuilder.group({myData: ''});"
              ]
            },
            {
              "id": 10,
              "topic": "HTTP",
              "description": "The Angular HttpClient module provides a way to make HTTP requests and handle responses in an Angular application. HTTP requests can be used to fetch data from a server, update data on the server, and delete data from the server.",
              "examples": [
                "constructor(private http: HttpClient) { }",
                "this.http.get<MyData[]>('/api/my-data').subscribe(data => this.myData = data);"
              ]
            },
            {
              "id": 11,
              "topic": "Testing",
              "description": "Testing is a crucial part of any software development process. Angular provides a testing framework that allows developers to write unit tests, integration tests, and end-to-end tests for their applications.",
              "examples": [
                "describe('MyComponent', () => { it('should create', () => { expect(component).toBeTruthy(); }); });",
                "TestBed.configureTestingModule({ declarations: [MyComponent], });"
              ]
            },
            {
              "id": 12,
              "topic": "Animation",
              "description": "Animations can add a lot of interactivity and visual interest to an Angular application. Angular provides an animation framework that allows developers to add animations to their applications using CSS, JavaScript, or a combination of both.",
              "examples": [
                "import { trigger, transition, style, animate } from '@angular/animations';",
                "animations: [ trigger('myAnimation', [ transition('* => *', [ style({ opacity: 0 }), animate('1s', style({ opacity: 1 })) ]) ]) ]"
              ]
            },
            {
              "id": 13,
              "topic": "Security",
              "description": "Security is an important concern in any web application. Angular provides a range of security features to help developers build secure applications, including built-in support for cross-site scripting (XSS) and cross-site request forgery (CSRF) protection.",
              "examples": [
                "@NgModule({ imports: [HttpClientModule], providers: [ { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true } ] })",
                "export class AuthInterceptor implements HttpInterceptor { intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> { // Add authorization header if (user) { request = request.clone({ setHeaders: { Authorization: `Bearer ${user.token}` } }); } return next.handle(request); } }"
              ]
            },
            {
              "id": 14,
              "topic": "Deployment",
              "description": "Deploying an Angular application involves building the application and then deploying the build artifacts to a server. There are several ways to deploy an Angular application, including using a cloud hosting platform, deploying to a traditional web server, or deploying as a Progressive Web App (PWA).",
              "examples": [
                "ng build --prod",
                "docker build -t myapp .",
                "docker run -d -p 80:80 myapp"
              ]
            },
            {
              "id": 15,
              "topic": "Performance",
              "description": "Performance is a critical factor in any web application. Angular provides several features to help optimize the performance of an application, including Ahead-of-Time (AOT) compilation, lazy loading, and tree shaking.",
              "examples": [
                "ng build --prod",
                "RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })",
                "import { someFunction } from 'lodash';"
              ]
            },
            {
              "id": 16,
              "topic": "Internationalization",
              "description": "Internationalization (i18n) is the process of designing an application to support multiple languages and locales. Angular provides built-in support for i18n, allowing developers to easily create applications that can be translated into multiple languages.",
              "examples": [
                "<p i18n>Hello, {{name}}!</p>",
                "ng xi18n --output-path src/locale --locale fr",
                "translate.get('HELLO', { name: 'John' }).subscribe(value => console.log(value));"
              ]
            },
            {
              "id": 17,
              "topic": "Accessibility",
              "description": "Accessibility is the practice of designing an application to be usable by people with disabilities. Angular provides a range of accessibility features, including ARIA attributes and support for screen readers.",
              "examples": [
                "<button [attr.aria-label]=\"'Add ' + item\">Add</button>",
                "<a routerLink='/home' tabindex='0'>Home</a>"
              ]
            },
            {
              "id": 18,
              "topic": "Animations",
              "description": "Animations can add an extra layer of interactivity and engagement to an Angular application. Angular provides a powerful animation system that can be used to create animations for a wide range of use cases.",
              "examples": [
                "@Component({ animations: [ trigger('fadeInOut', [ transition(':enter', [ style({ opacity: 0 }), animate('500ms ease-out', style({ opacity: 1 })) ]), transition(':leave', [ animate('500ms ease-out', style({ opacity: 0 })) ]) ]) })",
                "<div [@fadeInOut]>...</div>"
              ]
            },
            {
              "id": 19,
              "topic": "Server-side Rendering",
              "description": "Server-side rendering (SSR) is a technique that can improve the performance and SEO of an Angular application. Angular provides built-in support for SSR, allowing developers to easily create applications that can be rendered on the server.",
              "examples": [
                "import { renderModuleFactory } from '@angular/platform-server'; const { AppServerModuleNgFactory, LAZY_MODULE_MAP } = require('./dist/server/main'); app.get('*', (req, res) => { renderModuleFactory(AppServerModuleNgFactory, { url: req.url, document: '<app-root></app-root>', extraProviders: [ provideModuleMap(LAZY_MODULE_MAP) ] }).then(html => res.send(html)); });",
                "@NgModule({ bootstrap: [AppComponent], imports: [ AppModule, ServerModule, ModuleMapLoaderModule ], providers: [ { provide: APP_BASE_HREF, useValue: '/' } ] }) export class AppServerModule { }"
              ]
            },
            {
              "id": 20,
              "topic": "RxJS",
              "description": "RxJS is a powerful library for reactive programming in JavaScript. Angular makes extensive use of RxJS, using observables to handle asynchronous data streams in many parts of an application.",
              "examples": [
                "import { Observable, of } from 'rxjs'; import { catchError, map } from 'rxjs/operators'; @Injectable({ providedIn: 'root' }) export class UserService { private apiUrl = '/api/users'; getUsers(): Observable<User[]> { return this.http.get<User[]>(this.apiUrl).pipe( map(users => users.map(user => new User(user))), catchError(error => of([])) ); } }"
              ]
            },
            {
              "id": 21,
              "topic": "Lifecycle Hooks",
              "description": "Lifecycle hooks are methods that are called at specific points in the life of a component or directive. They allow you to perform actions at key moments, such as when a component is created, updated, or destroyed.",
              "examples": ["export class MyComponent implements OnInit { ngOnInit() { // Initialization logic here } }" ]
            },
            {
              "id": 22,
              "topic": "Shared Module",
              "description": "a shared module is a module that contains common components, directives, pipes, and services that can be shared across multiple modules in an Angular application.",
              "examples": [""]
            }
          ],          
          "details": "Angular is a popular open-source front-end framework for building web applications with declarative templates, dependency injection, and powerful data binding capabilities."
        },
        {
          "id": 8,
          "title": "Material Angular",
          "imageLink": "1c0GhS8ryYSSbLko77CFV7F9YRApIpPQV",
          "routerName": "/materialAngular",
          "details": "Angular Material is a UI component library for Angular that provides pre-built UI components based on Google's Material Design principles. It includes a wide range of components such as buttons, cards, dialogs, menus, and more, making it easy to create modern and consistent UIs."
        },
        {
          "id": 9,
          "title": "Node Js",
          "imageLink": "1NEFaP5AtlsvIJ9B7KqCcuAOd00ztfbT9",
          "routerName": "/nodejs",
          "details": "Node.js is an open-source, cross-platform, JavaScript runtime environment that enables developers to run JavaScript on the server-side. It provides a powerful set of APIs for building scalable, high-performance network applications, and is widely used for web development, server-side scripting, and automation."
        },
        {
          "id": 10,
          "title": "Flex Layout",
          "imageLink": "1RjJZmuG8i6pPPOoFu4sKMRRaX8oRC2ss",
          "routerName": "/fxlayout",
          "details": "Flex Layout is a powerful library in Angular for creating flexible and responsive layouts using CSS Flexbox. It provides a declarative API and a set of CSS utilities for building complex and responsive UIs quickly and easily."
        },
        {
          "id": 11,
          "title": "Ag Grid",
          "imageLink": "1D2LYaTU0VDawq2iUvAA-dsOuFYb8pcjB",
          "routerName": "/aggrid",
          "details": "Ag Grid is a powerful JavaScript library for creating data grids and tables in web applications, with a wide range of features and support for various data sources, and a flexible and customizable API."
        },
        {
          "id": 12,
          "title": "Rxjs",
          "imageLink": "1kVAzj7x0d1B64lcwFLT22SPVNHzwfRgH",
          "routerName": "/rxjs",
          "details": "RxJS (Reactive Extensions for JavaScript) is a powerful library for reactive programming in JavaScript, which is used for handling asynchronous and event-based applications. It provides a set of tools for composing and transforming streams of data, making it easier to manage complex data flows in web applications."
        },
        {
          "id": 13,
          "title": "REST Apis",
          "imageLink": "1j7C6gChwyH50RZoTzzOe73JrK0w7Bqcx",
          "routerName": "/restapi",
          "details": "A REST API (Representational State Transfer Application Programming Interface) is a web-based API that uses HTTP requests to access and manipulate resources. It follows a set of architectural principles to create a uniform interface between clients and servers, allowing different systems to communicate with each other efficiently and reliably."
        },
        {
          "id": 14,
          "title": "Git Commands",
          "imageLink": "15njtyYT1jN1DAKr_WO6cGEnCpc_1H1Mf",
          "routerName": "/git",
          "details": "Git is a version control system for tracking changes in source code during software development. Some common Git commands include git clone, git add, git commit, git push, and git pull, which are used to clone repositories, stage changes, commit changes, push changes to remote repositories, and pull changes from remote repositories, respectively."
        },
        {
          "id": 15,
          "title": "Git Hub",
          "imageLink": "1aYv_7mLgreOn_Ua6lFVRGxK5hPRJj-FM",
          "routerName": "/github",
          "details": "GitHub is a web-based Git repository hosting service that provides a web interface and various tools for collaborating on code. Some common GitHub commands include git clone, git add, git commit, git push, and git pull, which are used to clone repositories, stage changes, commit changes, push changes to remote repositories, and pull changes from remote repositories, respectively. Additionally, GitHub provides commands for managing pull requests, issues, and releases."
        },
        {
          "id": 16,
          "title": "Bit Bucket",
          "imageLink": "1lRqovK6OffFspsrgaJ8tW6WgFQvrkG4B",
          "routerName": "/bitbucket",
          "details": "Bitbucket is a web-based Git repository management platform that allows teams to collaborate on code and manage projects in a secure and scalable environment. It offers features such as pull requests, pipelines, and code reviews."
        },
        {
          "id": 17,
          "title": "Algorithm",
          "imageLink": "1TQ6z6jtfJ-0AAI_sfc5OV6mn7agnwLI1",
          "routerName": "/algorithm",
          "details": "An algorithm is a set of steps or rules for solving a problem or performing a specific task. It is a fundamental concept in computer science and is used to design efficient and effective computer programs."
        },
        {
          "id": 18,
          "title": "Data Structure",
          "imageLink": "1LNVNd1BvC-Y3M9L47Ea6hmJOC8wXxzwV",
          "routerName": "/datastructure",
          "details": "Data structure is a way of organizing and storing data in a computer to facilitate efficient retrieval and manipulation of information."
        },
        {
          "id": 19,
          "title": "Python",
          "imageLink": "1P-jFFfG64R68v_gcV-FTdRFr13ox9mas",
          "routerName": "/python",
          "details": "Python is a popular high-level programming language used for a wide range of applications such as web development, data analysis, artificial intelligence, and more. It is known for its simple syntax, readability, and powerful libraries that make it easy to write clean and efficient code."
        },
        {
          "id": 20,
          "title": "Karma and Jasmin",
          "imageLink": "1Pu_yMEuqPu3zI6rSqdH7UcFPuCf7wdgZ",
          "routerName": "/karmajasmine",
          "details": "Karma and Jasmine are two popular JavaScript testing frameworks that are often used together. Karma is a test runner that allows you to run tests in multiple browsers, while Jasmine is a behavior-driven development (BDD) testing framework that provides a syntax for defining test suites and individual tests."
        },
        {
          "id": 21,
          "title": "Express Js",
          "imageLink": "1ShpO1VEWyl8xWaW-FhQADl74IkbOs7OJ",
          "routerName": "/express",
          "details": "Express.js, commonly referred to as simply Express, is a popular web application framework for Node.js. It provides a set of features for building web applications and APIs, making it a go-to choice for developers working with Node.js."
        },
        {
          "id": 22,
          "title": "Mongo DB",
          "imageLink": "1fRbAAdW1N9fnjsytuyEyVPI6yn6Vokpt",
          "routerName": "/mongo",
          "details": "MongoDB is a popular open-source, document-oriented NoSQL database that is designed for modern applications. Unlike traditional SQL databases, MongoDB uses a flexible document model that allows you to store data in JSON-like documents with dynamic schemas."
        }
      ],
     "javascript":[
        {
          "id": 1,
          "title": "JavaScript Introduction",
          "details": "JavaScript is a programming language that is commonly used in web development. It is a client-side language, meaning that it runs on the user's browser, rather than on the server. JavaScript was created by Brendan Eich in just 10 days in 1995, while he was working at Netscape Communications Corporation. JavaScript is used to add interactivity and dynamic behavior to web pages. It can be used to create animations, validate forms, manipulate the DOM, and much more. JavaScript is an object-oriented language, meaning that it uses objects to represent data and methods. Objects can be created from classes, which define the properties and methods that the object will have. Variables are used to store data in JavaScript. There are several different types of variables, including strings, numbers, and booleans. JavaScript uses control structures, such as if statements and loops, to control the flow of a program. These structures allow developers to execute different blocks of code based on certain conditions. Functions are used in JavaScript to encapsulate a set of instructions that can be reused throughout a program. Functions can take parameters, which are values that are passed to the function when it is called. JavaScript has built-in objects, such as the Math object and the Date object, which provide useful functionality that can be used in a program. JavaScript can be used to interact with the browser's Document Object Model (DOM), which represents the structure of an HTML document. This allows developers to dynamically modify the content and behavior of a web page. JavaScript is a constantly evolving language, with new features and updates being added regularly. It is an essential tool for web developers, and is used by companies and organizations of all sizes to create engaging and interactive web experiences.",
          "subTopics":[]
        },
        {
            "id": 2,
            "title": "JavaScript Strings",
            "details": "<p> In JavaScript, strings are a sequence of characters that are enclosed in quotes. Strings can be created using single quotes, double quotes, or backticks. Here are some examples of creating strings in JavaScript: Using single quotes: javascript <pre> <code> let myString = 'This is a string.'; </code> </pre> Using double quotes: javascript Copy code let myString = \"This is also a string.\"; Using backticks (template literals): javascript Copy code let myString = `This is a string with ${variable} and ${expression}.`; In addition to creating strings, JavaScript provides a number of built-in methods for manipulating strings. Here are some common string methods: length: returns the length of the string javascript Copy code let myString = 'Hello, world!'; console.log(myString.length); // 13'</p>",
            "subTopics" : ["charAt()", "charCodeAt()", "concat()", "endsWith()", "includes()", "indexOf()", "lastIndexOf()", "localeCompare()", "match()", "matchAll()", "normalize()", "padEnd()", "padStart()", "repeat()", "replace()", "search()", "slice()", "split()", "startsWith()", "substr()", "substring()", "toLocaleLowerCase()", "toLocaleUpperCase()", "toLowerCase()", "toString()", "toUpperCase()", "trim()", "valueOf()"]
        },
        {
            "topicHead": "charAt()",
            "explanation" : "<p>The <code>charAt()</code> method in JavaScript is used to retrieve the character at a specified index position in a string. The method takes one parameter, which is the index of the character that you want to retrieve.</p><p>Here's an example:</p><pre><code>var str = \"Hello World\"; \n var char = str.charAt(6); \n console.log(char);  // Output: \"W\" </code></pre><p>In the example above, <code>str</code> contains the string \"Hello World\". The <code>charAt()</code> method is called on <code>str</code> with an argument of <code>6</code>, which corresponds to the character \"W\" in the string. The resulting character, \"W\", is then stored in the <code>char</code> variable and printed to the console.</p><p>It is important to note that the <code>charAt()</code> method returns an empty string if the specified index is out of range. For example:</p><pre><div><code>var str = \"Hello World\"; \n var char = str.charAt(100); \n console.log(char); // Output: \"\" </code></div></pre><p>In this example, the <code>charAt()</code> method is called with an argument of <code>100</code>, which is beyond the range of characters in the string. As a result, an empty string is returned.</p>"
        }
    ]
}